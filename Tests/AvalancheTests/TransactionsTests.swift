//
//  TransactionsTests.swift
//  
//
//  Created by Ostap Danylovych on 25.08.2021.
//

import Foundation
import XCTest
@testable import Avalanche
import web3swift

final class TransactionsTests: XCTestCase {
    private static let hrp = "avax"
    private static let chainId = "X"
    
    private static let xChainDecoderContext = TestAvalancheDecoderContext(
        hrp: hrp,
        chainId: "X",
        dynamicParser: XChainDynamicTypeRegistry.instance
    )
    
    private static let pChainDecoderContext = TestAvalancheDecoderContext(
        hrp: hrp,
        chainId: "P",
        dynamicParser: PChainDynamicTypeRegistry.instance
    )
    
    private static let cChainDecoderContext = TestAvalancheDecoderContext(
        hrp: hrp,
        chainId: "C",
        dynamicParser: CChainDynamicTypeRegistry.instance
    )
    
    struct TestAvalancheDecoderContext: AvalancheDecoderContext {
        let dynamicParser: DynamicTypeParser
        let hrp: String
        let chainId: String
        
        init(hrp: String, chainId: String, dynamicParser: DynamicTypeParser) {
            self.hrp = hrp
            self.chainId = chainId
            self.dynamicParser = dynamicParser
        }
    }
    
    private func exampleTransferableOutput() throws -> TransferableOutput {
        try TransferableOutput(
            assetID: AssetID(hex: "0x000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f")!,
            output: exampleSECP256K1TransferOutput()
        )
    }
    
    private func exampleSECP256K1TransferOutput() throws -> SECP256K1TransferOutput {
        try SECP256K1TransferOutput(
            amount: 12345,
            locktime: Date(timeIntervalSince1970: 54321),
            threshold: 1,
            addresses: [
                Address(raw: Data(hex: "0x51025c61fbcfc078f69334f834be6dd26d55a955")!, hrp: Self.hrp, chainId: Self.chainId),
                Address(raw: Data(hex: "0xc3344128e060128ede3523a24a461c8943ab0859")!, hrp: Self.hrp, chainId: Self.chainId),
            ]
        )
    }
    
    private func exampleSECP256K1MintOutput() throws -> SECP256K1MintOutput {
        try SECP256K1MintOutput(
            locktime: Date(timeIntervalSince1970: 54321),
            threshold: 1,
            addresses: [
                Address(raw: Data(hex: "0x51025c61fbcfc078f69334f834be6dd26d55a955")!, hrp: Self.hrp, chainId: Self.chainId),
                Address(raw: Data(hex: "0xc3344128e060128ede3523a24a461c8943ab0859")!, hrp: Self.hrp, chainId: Self.chainId),
            ]
        )
    }
    
    private func exampleTransferableInput() throws -> TransferableInput {
        try TransferableInput(
            transactionID: TransactionID(hex: "0xf1e1d1c1b1a191817161514131211101f0e0d0c0b0a090807060504030201000")!,
            utxoIndex: 5,
            assetID: AssetID(hex: "0x000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f")!,
            input: exampleSECP256K1TransferInput()
        )
    }
    
    private func exampleSECP256K1TransferInput() throws -> SECP256K1TransferInput {
        try SECP256K1TransferInput(
            amount: 123456789,
            addressIndices: [3, 7]
        )
    }
    
    private func exampleTransferableOperation() throws -> TransferableOperation {
        try TransferableOperation(
            assetID: AssetID(hex: "0x000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f")!,
            utxoIDs: [
                UTXOID(
                    transactionID: TransactionID(
                        hex: "0xf1e1d1c1b1a191817161514131211101f0e0d0c0b0a090807060504030201000"
                    )!,
                    utxoIndex: 5
                )
            ],
            transferOperation: exampleNFTTransferOperation()
        )
    }
    
    private func exampleNFTTransferOperation() throws -> NFTTransferOperation {
        try NFTTransferOperation(
            addressIndices: [0x00000007, 0x00000003],
            nftTransferOutput: NFTTransferOperationOutput(
                groupID: 12345,
                payload: Data(hex: "0x431100")!,
                locktime: Date(timeIntervalSince1970: 54321),
                threshold: 1,
                addresses: [
                    Address(
                        raw: Data(hex: "0x51025c61fbcfc078f69334f834be6dd26d55a955")!,
                        hrp: Self.hrp,
                        chainId: Self.chainId
                    ),
                    Address(
                        raw: Data(hex: "0xc3344128e060128ede3523a24a461c8943ab0859")!,
                        hrp: Self.hrp,
                        chainId: Self.chainId
                    ),
                ]
            )
        )
    }
    
    private func exampleInitialState() throws -> InitialState {
        try InitialState(
            featureExtensionID: FeatureExtensionID.secp256K1,
            outputs: [exampleSECP256K1TransferOutput()]
        )
    }
    
    private func exampleSECP256K1Credential() -> SECP256K1Credential {
        SECP256K1Credential(signatures: [
            Signature(hex: "0x000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1e1d1f202122232425262728292a2b2c2e2d2f303132333435363738393a3b3c3d3e3f00")!,
            Signature(hex: "0x404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5e5d5f606162636465666768696a6b6c6e6d6f707172737475767778797a7b7c7d7e7f00")!,
        ])
    }
    
    private func exampleBaseTransaction() throws -> BaseTransaction {
        try BaseTransaction(
            networkID: NetworkID(4),
            blockchainID: BlockchainID(
                data: Data(hex: "0xffffffffeeeeeeeeddddddddccccccccbbbbbbbbaaaaaaaa9999999988888888")!
            )!,
            outputs: [exampleTransferableOutput()],
            inputs: [exampleTransferableInput()],
            memo: Data(hex: "0x00010203")!
        )
    }
    
    private func examplePChainTransferableOutput() throws -> TransferableOutput {
        try TransferableOutput(
            assetID: AssetID(hex: "0x6870b7d66ac32540311379e5b5dbad28ec7eb8ddbfc8f4d67299ebb48475907a")!,
            output: SECP256K1TransferOutput(
                amount: 3999000000,
                locktime: Date(timeIntervalSince1970: 0),
                threshold: 1,
                addresses: [
                    Address(raw: Data(hex: "0xda2bee01be82ecc00c34f361eda8eb30fb5a715c")!, hrp: Self.hrp, chainId: "P")
                ]
            )
        )
    }
    
    private func examplePChainTransferableInput() throws -> TransferableInput {
        try TransferableInput(
            transactionID: TransactionID(hex: "0xdfafbdf5c81f635c9257824ff21c8e3e6f7b632ac306e11446ee540d34711a15")!,
            utxoIndex: 1,
            assetID: AssetID(hex: "0x6870b7d66ac32540311379e5b5dbad28ec7eb8ddbfc8f4d67299ebb48475907a")!,
            input: SECP256K1TransferInput(
                amount: 4000000000,
                addressIndices: [0]
            )
        )
    }
    
    private func exampleSECP256K1OutputOwners() throws -> SECP256K1OutputOwners {
        try SECP256K1OutputOwners(
            locktime: Date(timeIntervalSince1970: 0),
            threshold: 1,
            addresses: [Address(raw: Data(hex: "0xda2bee01be82ecc00c34f361eda8eb30fb5a715c")!, hrp: Self.hrp, chainId: "P")]
        )
    }
    
    private func exampleValidator() -> Validator {
        Validator(
            nodeID: NodeID(hex: "0xe9094f73698002fd52c90819b457b9fbc866ab80")!,
            startTime: Date(timeIntervalSince1970: 0x000000005f21f31d),
            endTime: Date(timeIntervalSince1970: 0x000000005f497dc6),
            weight: 0x000000000000d431
        )
    }
    
    private func exampleEVMInput() -> EVMInput {
        EVMInput(
            address: EthereumAddress("0x8db97c7cece249c2b98bdc0226cc4c2a57bf52fc")!,
            amount: 2000000,
            assetID: AssetID(hex: "0xdbcf890f77f49b96857648b72b77f9f82937f28a68704af05da0dc12ba53f2db")!,
            nonce: 0
        )
    }
    
    private func exampleEVMOutput() -> EVMOutput {
        EVMOutput(
            address: EthereumAddress("0x0eb5ccb85c29009b6060decb353a38ea3b52cd20")!,
            amount: 500000000000,
            assetID: AssetID(hex: "0xdbcf890f77f49b96857648b72b77f9f82937f28a68704af05da0dc12ba53f2db")!
        )
    }
    
    private func encodeDecodeTest<T: Equatable & AvalancheCodable>(
        value: T,
        bytes: [UInt8],
        context: AvalancheDecoderContext = xChainDecoderContext
    ) throws {
        let encoded = Array(try DefaultAvalancheEncoder().encode(value).output)
        XCTAssertEqual(encoded, value is UnsignedAvalancheTransaction ? [0x00, 0x00] + bytes : bytes)
        let decoded = try DefaultAvalancheDecoder(context: context, data: Data(bytes)).decode(T.self)
        XCTAssertEqual(decoded, value)
    }
    
    private func encodeDecodeFixedTest<T: Equatable & AvalancheFixedCodable>(
        value: T,
        bytes: [UInt8],
        size: Int,
        context: AvalancheDecoderContext = xChainDecoderContext
    ) throws {
        let encoded = Array(try DefaultAvalancheEncoder().encode(value, size: size).output)
        XCTAssertEqual(encoded, bytes)
        let decoded = try DefaultAvalancheDecoder(context: context, data: Data(bytes)).decode(T.self, size: size)
        XCTAssertEqual(decoded, value)
    }
    
    func testEncodeDecodeByte() throws {
        try encodeDecodeTest(
            value: UInt8(0x01),
            bytes: [0x01]
        )
    }

    func testEncodeDecodeShort() throws {
        try encodeDecodeTest(
            value: UInt16(0x0102),
            bytes: [0x01, 0x02]
        )
    }

    func testEncodeDecodeInteger() throws {
        try encodeDecodeTest(
            value: UInt32(0x01020304),
            bytes: [0x01, 0x02, 0x03, 0x04]
        )
    }

    func testEncodeDecodeLongInteger() throws {
        try encodeDecodeTest(
            value: UInt64(0x0102030405060708),
            bytes: [0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08]
        )
    }

    func testEncodeDecodeIPAddresses() throws {
        try encodeDecodeTest(
            value: IPv4Address(host: (127, 0, 0, 1), port: 9650),
            bytes: [
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x01,
                0x25, 0xb2
            ]
        )
        try encodeDecodeTest(
            value: IPv6Address(host: [0x2001, 0x0db8, 0xac10, 0xfe01, 0, 0, 0, 0], port: 12345),
            bytes: [
                0x20, 0x01, 0x0d, 0xb8, 0xac, 0x10, 0xfe, 0x01,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x30, 0x39
            ]
        )
    }

    func testEncodeDecodeFixedLengthArray() throws {
        try encodeDecodeFixedTest(
            value: [UInt8(0x01), UInt8(0x02)],
            bytes: [0x01, 0x02],
            size: 2
        )
        try encodeDecodeFixedTest(
            value: [UInt32(0x03040506)],
            bytes: [0x03, 0x04, 0x05, 0x06],
            size: 1
        )
    }

    func testEncodeDecodeVariableLengthArray() throws {
        try encodeDecodeTest(
            value: [UInt8(0x01), UInt8(0x02)],
            bytes: [0x00, 0x00, 0x00, 0x02, 0x01, 0x02]
        )
        try encodeDecodeTest(
            value: [UInt32(0x03040506)],
            bytes: [0x00, 0x00, 0x00, 0x01, 0x03, 0x04, 0x05, 0x06]
        )
    }

    func testEncodeDecodeString() throws {
        try encodeDecodeTest(
            value: "Avax",
            bytes: [0x00, 0x04, 0x41, 0x76, 0x61, 0x78]
        )
    }
    
    func testEncodeDecodeTransferableOutput() throws {
        try encodeDecodeTest(
            value: exampleTransferableOutput(),
            bytes: [
                // assetID:
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
                0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
                0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
                // output:
                0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x30, 0x39, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0xd4, 0x31, 0x00, 0x00, 0x00, 0x01,
                0x00, 0x00, 0x00, 0x02, 0x51, 0x02, 0x5c, 0x61,
                0xfb, 0xcf, 0xc0, 0x78, 0xf6, 0x93, 0x34, 0xf8,
                0x34, 0xbe, 0x6d, 0xd2, 0x6d, 0x55, 0xa9, 0x55,
                0xc3, 0x34, 0x41, 0x28, 0xe0, 0x60, 0x12, 0x8e,
                0xde, 0x35, 0x23, 0xa2, 0x4a, 0x46, 0x1c, 0x89,
                0x43, 0xab, 0x08, 0x59,
            ]
        )
    }

    func testEncodeDecodeSECP256K1TransferOutput() throws {
        try encodeDecodeTest(
            value: exampleSECP256K1TransferOutput(),
            bytes: [
                // typeID:
                0x00, 0x00, 0x00, 0x07,
                // amount:
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x39,
                // locktime:
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd4, 0x31,
                // threshold:
                0x00, 0x00, 0x00, 0x01,
                // number of addresses:
                0x00, 0x00, 0x00, 0x02,
                // addrs[0]:
                0x51, 0x02, 0x5c, 0x61, 0xfb, 0xcf, 0xc0, 0x78,
                0xf6, 0x93, 0x34, 0xf8, 0x34, 0xbe, 0x6d, 0xd2,
                0x6d, 0x55, 0xa9, 0x55,
                // addrs[1]:
                0xc3, 0x34, 0x41, 0x28, 0xe0, 0x60, 0x12, 0x8e,
                0xde, 0x35, 0x23, 0xa2, 0x4a, 0x46, 0x1c, 0x89,
                0x43, 0xab, 0x08, 0x59,
            ]
        )
    }
    
    func testEncodeDecodeSECP256K1MintOutput() throws {
        try encodeDecodeTest(
            value: exampleSECP256K1MintOutput(),
            bytes: [
                // typeID:
                0x00, 0x00, 0x00, 0x06,
                // locktime:
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd4, 0x31,
                // threshold:
                0x00, 0x00, 0x00, 0x01,
                // number of addresses:
                0x00, 0x00, 0x00, 0x02,
                // addrs[0]:
                0x51, 0x02, 0x5c, 0x61, 0xfb, 0xcf, 0xc0, 0x78,
                0xf6, 0x93, 0x34, 0xf8, 0x34, 0xbe, 0x6d, 0xd2,
                0x6d, 0x55, 0xa9, 0x55,
                // addrs[1]:
                0xc3, 0x34, 0x41, 0x28, 0xe0, 0x60, 0x12, 0x8e,
                0xde, 0x35, 0x23, 0xa2, 0x4a, 0x46, 0x1c, 0x89,
                0x43, 0xab, 0x08, 0x59,
            ]
        )
    }
    
    func testEncodeDecodeNFTTransferOutput() throws {
        try encodeDecodeTest(
            value: NFTTransferOutput(
                groupID: 12345,
                payload: Data(hex: "0x431100")!,
                locktime: Date(timeIntervalSince1970: 54321),
                threshold: 1,
                addresses: [
                    Address(raw: Data(hex: "0x51025c61fbcfc078f69334f834be6dd26d55a955")!, hrp: Self.hrp, chainId: Self.chainId),
                    Address(raw: Data(hex: "0xc3344128e060128ede3523a24a461c8943ab0859")!, hrp: Self.hrp, chainId: Self.chainId),
                ]
            ),
            bytes: [
                // TypeID:
                0x00, 0x00, 0x00, 0x0b,
                // groupID:
                0x00, 0x00, 0x30, 0x39,
                // length of payload:
                0x00, 0x00, 0x00, 0x03,
                // payload:
                0x43, 0x11, 0x00,
                // locktime:
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd4, 0x31,
                // threshold:
                0x00, 0x00, 0x00, 0x01,
                // number of addresses:
                0x00, 0x00, 0x00, 0x02,
                // addrs[0]:
                0x51, 0x02, 0x5c, 0x61, 0xfb, 0xcf, 0xc0, 0x78,
                0xf6, 0x93, 0x34, 0xf8, 0x34, 0xbe, 0x6d, 0xd2,
                0x6d, 0x55, 0xa9, 0x55,
                // addrs[1]:
                0xc3, 0x34, 0x41, 0x28, 0xe0, 0x60, 0x12, 0x8e,
                0xde, 0x35, 0x23, 0xa2, 0x4a, 0x46, 0x1c, 0x89,
                0x43, 0xab, 0x08, 0x59,
            ]
        )
    }
    
    func testEncodeDecodeNFTMintOutput() throws {
        try encodeDecodeTest(
            value: NFTMintOutput(
                groupID: 12345,
                locktime: Date(timeIntervalSince1970: 54321),
                threshold: 1,
                addresses: [
                    Address(raw: Data(hex: "0x51025c61fbcfc078f69334f834be6dd26d55a955")!, hrp: Self.hrp, chainId: Self.chainId),
                    Address(raw: Data(hex: "0xc3344128e060128ede3523a24a461c8943ab0859")!, hrp: Self.hrp, chainId: Self.chainId),
                ]
            ),
            bytes: [
                // TypeID
                0x00, 0x00, 0x00, 0x0a,
                // groupID:
                0x00, 0x00, 0x30, 0x39,
                // locktime:
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd4, 0x31,
                // threshold:
                0x00, 0x00, 0x00, 0x01,
                // number of addresses:
                0x00, 0x00, 0x00, 0x02,
                // addrs[0]:
                0x51, 0x02, 0x5c, 0x61, 0xfb, 0xcf, 0xc0, 0x78,
                0xf6, 0x93, 0x34, 0xf8, 0x34, 0xbe, 0x6d, 0xd2,
                0x6d, 0x55, 0xa9, 0x55,
                // addrs[1]:
                0xc3, 0x34, 0x41, 0x28, 0xe0, 0x60, 0x12, 0x8e,
                0xde, 0x35, 0x23, 0xa2, 0x4a, 0x46, 0x1c, 0x89,
                0x43, 0xab, 0x08, 0x59,
            ]
        )
    }
    
    func testEncodeDecodeTransferableInput() throws {
        try encodeDecodeTest(
            value: exampleTransferableInput(),
            bytes: [
                // txID:
                0xf1, 0xe1, 0xd1, 0xc1, 0xb1, 0xa1, 0x91, 0x81,
                0x71, 0x61, 0x51, 0x41, 0x31, 0x21, 0x11, 0x01,
                0xf0, 0xe0, 0xd0, 0xc0, 0xb0, 0xa0, 0x90, 0x80,
                0x70, 0x60, 0x50, 0x40, 0x30, 0x20, 0x10, 0x00,
                // utxoIndex:
                0x00, 0x00, 0x00, 0x05,
                // assetID:
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
                0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
                0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
                // input:
                0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00,
                0x07, 0x5b, 0xcd, 0x15, 0x00, 0x00, 0x00, 0x02,
                0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x07
            ]
        )
    }
    
    func testEncodeDecodeSECP256K1TransferInput() throws {
        try encodeDecodeTest(
            value: exampleSECP256K1TransferInput(),
            bytes: [
                // type id:
                0x00, 0x00, 0x00, 0x05,
                // amount:
                0x00, 0x00, 0x00, 0x00, 0x07, 0x5b, 0xcd, 0x15,
                // length:
                0x00, 0x00, 0x00, 0x02,
                // sig[0]
                0x00, 0x00, 0x00, 0x03,
                // sig[1]
                0x00, 0x00, 0x00, 0x07,
            ]
        )
    }
    
    func testEncodeDecodeSECP256K1MintOperation() throws {
        try encodeDecodeTest(
            value: SECP256K1MintOperation(
                addressIndices: [0x00000003, 0x00000007],
                mintOutput: exampleSECP256K1MintOutput(),
                transferOutput: exampleSECP256K1TransferOutput()
            ),
            bytes: [
                // typeID
                0x00, 0x00, 0x00, 0x08,
                // number of address_indices:
                0x00, 0x00, 0x00, 0x02,
                // address_indices[0]:
                0x00, 0x00, 0x00, 0x03,
                // address_indices[1]:
                0x00, 0x00, 0x00, 0x07,
                // mint output
                0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0xd4, 0x31, 0x00, 0x00, 0x00, 0x01,
                0x00, 0x00, 0x00, 0x02, 0x51, 0x02, 0x5c, 0x61,
                0xfb, 0xcf, 0xc0, 0x78, 0xf6, 0x93, 0x34, 0xf8,
                0x34, 0xbe, 0x6d, 0xd2, 0x6d, 0x55, 0xa9, 0x55,
                0xc3, 0x34, 0x41, 0x28, 0xe0, 0x60, 0x12, 0x8e,
                0xde, 0x35, 0x23, 0xa2, 0x4a, 0x46, 0x1c, 0x89,
                0x43, 0xab, 0x08, 0x59,
                // transfer output
                0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x30, 0x39, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0xd4, 0x31, 0x00, 0x00, 0x00, 0x01,
                0x00, 0x00, 0x00, 0x02, 0x51, 0x02, 0x5c, 0x61,
                0xfb, 0xcf, 0xc0, 0x78, 0xf6, 0x93, 0x34, 0xf8,
                0x34, 0xbe, 0x6d, 0xd2, 0x6d, 0x55, 0xa9, 0x55,
                0xc3, 0x34, 0x41, 0x28, 0xe0, 0x60, 0x12, 0x8e,
                0xde, 0x35, 0x23, 0xa2, 0x4a, 0x46, 0x1c, 0x89,
                0x43, 0xab, 0x08, 0x59,
            ]
        )
    }
    
    func testEncodeDecodeNFTMintOperation() throws {
        try encodeDecodeTest(
            value: NFTMintOperation(
                addressIndices: [0x00000003, 0x00000007],
                groupID: 12345,
                payload: Data(hex: "0x431100")!,
                outputs: [
                    NFTMintOperationOutput(
                        locktime: Date(timeIntervalSince1970: 54321),
                        threshold: 1,
                        addresses: [
                            Address(
                                raw: Data(hex: "0xc3344128e060128ede3523a24a461c8943ab0859")!,
                                hrp: Self.hrp,
                                chainId: Self.chainId
                            ),
                        ]
                    )
                ]
            ),
            bytes: [
                // Type ID
                0x00, 0x00, 0x00, 0x0c,
                // number of address indices:
                0x00, 0x00, 0x00, 0x02,
                // address index 0:
                0x00, 0x00, 0x00, 0x03,
                // address index 1:
                0x00, 0x00, 0x00, 0x07,
                // groupID:
                0x00, 0x00, 0x30, 0x39,
                // length of payload:
                0x00, 0x00, 0x00, 0x03,
                // payload:
                0x43, 0x11, 0x00,
                // number of outputs:
                0x00, 0x00, 0x00, 0x01,
                // outputs[0]
                // locktime:
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd4, 0x31,
                // threshold:
                0x00, 0x00, 0x00, 0x01,
                // number of addresses:
                0x00, 0x00, 0x00, 0x01,
                // addrs[0]:
                0xc3, 0x34, 0x41, 0x28, 0xe0, 0x60, 0x12, 0x8e,
                0xde, 0x35, 0x23, 0xa2, 0x4a, 0x46, 0x1c, 0x89,
                0x43, 0xab, 0x08, 0x59,
            ]
        )
    }
    
    func testEncodeDecodeNFTTransferOperation() throws {
        try encodeDecodeTest(
            value: exampleNFTTransferOperation(),
            bytes: [
                // Type ID
                0x00, 0x00, 0x00, 0x0d,
                // number of address indices:
                0x00, 0x00, 0x00, 0x02,
                // address index 0:
                0x00, 0x00, 0x00, 0x07,
                // address index 1:
                0x00, 0x00, 0x00, 0x03,
                // groupID:
                0x00, 0x00, 0x30, 0x39,
                // length of payload:
                0x00, 0x00, 0x00, 0x03,
                // payload:
                0x43, 0x11, 0x00,
                // locktime:
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd4, 0x31,
                // threshold:
                0x00, 0x00, 0x00, 0x01,
                // number of addresses:
                0x00, 0x00, 0x00, 0x02,
                // addrs[0]:
                0x51, 0x02, 0x5c, 0x61, 0xfb, 0xcf, 0xc0, 0x78,
                0xf6, 0x93, 0x34, 0xf8, 0x34, 0xbe, 0x6d, 0xd2,
                0x6d, 0x55, 0xa9, 0x55,
                // addrs[1]:
                0xc3, 0x34, 0x41, 0x28, 0xe0, 0x60, 0x12, 0x8e,
                0xde, 0x35, 0x23, 0xa2, 0x4a, 0x46, 0x1c, 0x89,
                0x43, 0xab, 0x08, 0x59,
            ]
        )
    }
    
    func testEncodeDecodeTransferableOperation() throws {
        try encodeDecodeTest(
            value: exampleTransferableOperation(),
            bytes: [
                // assetID:
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
                0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
                0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
                // number of utxoIDs:
                0x00, 0x00, 0x00, 0x01,
                // txID:
                0xf1, 0xe1, 0xd1, 0xc1, 0xb1, 0xa1, 0x91, 0x81,
                0x71, 0x61, 0x51, 0x41, 0x31, 0x21, 0x11, 0x01,
                0xf0, 0xe0, 0xd0, 0xc0, 0xb0, 0xa0, 0x90, 0x80,
                0x70, 0x60, 0x50, 0x40, 0x30, 0x20, 0x10, 0x00,
                // utxoIndex:
                0x00, 0x00, 0x00, 0x05,
                // op:
                0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x02,
                0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x03,
                0x00, 0x00, 0x30, 0x39, 0x00, 0x00, 0x00, 0x03,
                0x43, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0xd4, 0x31, 0x00, 0x00, 0x00, 0x01, 0x00,
                0x00, 0x00, 0x02, 0x51, 0x02, 0x5c, 0x61, 0xfb,
                0xcf, 0xc0, 0x78, 0xf6, 0x93, 0x34, 0xf8, 0x34,
                0xbe, 0x6d, 0xd2, 0x6d, 0x55, 0xa9, 0x55, 0xc3,
                0x34, 0x41, 0x28, 0xe0, 0x60, 0x12, 0x8e, 0xde,
                0x35, 0x23, 0xa2, 0x4a, 0x46, 0x1c, 0x89, 0x43,
                0xab, 0x08, 0x59,
            ]
        )
    }
    
    func testEncodeDecodeInitialState() throws {
        try encodeDecodeTest(
            value: exampleInitialState(),
            bytes: [
                // fxID:
                0x00, 0x00, 0x00, 0x00,
                // num outputs:
                0x00, 0x00, 0x00, 0x01,
                // output:
                0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x30, 0x39, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0xd4, 0x31, 0x00, 0x00, 0x00, 0x01,
                0x00, 0x00, 0x00, 0x02, 0x51, 0x02, 0x5c, 0x61,
                0xfb, 0xcf, 0xc0, 0x78, 0xf6, 0x93, 0x34, 0xf8,
                0x34, 0xbe, 0x6d, 0xd2, 0x6d, 0x55, 0xa9, 0x55,
                0xc3, 0x34, 0x41, 0x28, 0xe0, 0x60, 0x12, 0x8e,
                0xde, 0x35, 0x23, 0xa2, 0x4a, 0x46, 0x1c, 0x89,
                0x43, 0xab, 0x08, 0x59,
            ]
        )
    }
    
    func testEncodeDecodeSECP256K1Credential() throws {
        try encodeDecodeTest(
            value: exampleSECP256K1Credential(),
            bytes: [
                // Type ID
                0x00, 0x00, 0x00, 0x09,
                // length:
                0x00, 0x00, 0x00, 0x02,
                // sig[0]
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
                0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
                0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1e, 0x1d, 0x1f,
                0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,
                0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2e, 0x2d, 0x2f,
                0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
                0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
                0x00,
                // sig[1]
                0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,
                0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f,
                0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57,
                0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5e, 0x5d, 0x5f,
                0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
                0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6e, 0x6d, 0x6f,
                0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
                0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f,
                0x00,
            ]
        )
    }
    
    func testEncodeDecodeNFTCredential() throws {
        try encodeDecodeTest(
            value: NFTCredential(signatures: [
                Signature(hex: "0x000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1e1d1f202122232425262728292a2b2c2e2d2f303132333435363738393a3b3c3d3e3f00")!,
                Signature(hex: "0x404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5e5d5f606162636465666768696a6b6c6e6d6f707172737475767778797a7b7c7d7e7f00")!,
            ]),
            bytes: [
                // Type ID
                0x00, 0x00, 0x00, 0x0e,
                // length:
                0x00, 0x00, 0x00, 0x02,
                // sig[0]
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
                0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
                0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1e, 0x1d, 0x1f,
                0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,
                0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2e, 0x2d, 0x2f,
                0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
                0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
                0x00,
                // sig[1]
                0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,
                0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f,
                0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57,
                0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5e, 0x5d, 0x5f,
                0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
                0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6e, 0x6d, 0x6f,
                0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
                0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f,
                0x00,
            ]
        )
    }
    
    func testEncodeDecodeBaseTransaction() throws {
        try encodeDecodeTest(
            value: exampleBaseTransaction(),
            bytes: [
                // typeID
                0x00, 0x00, 0x00, 0x00,
                // networkID:
                0x00, 0x00, 0x00, 0x04,
                // blockchainID:
                0xff, 0xff, 0xff, 0xff, 0xee, 0xee, 0xee, 0xee,
                0xdd, 0xdd, 0xdd, 0xdd, 0xcc, 0xcc, 0xcc, 0xcc,
                0xbb, 0xbb, 0xbb, 0xbb, 0xaa, 0xaa, 0xaa, 0xaa,
                0x99, 0x99, 0x99, 0x99, 0x88, 0x88, 0x88, 0x88,
                // number of outputs:
                0x00, 0x00, 0x00, 0x01,
                // transferable output:
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
                0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
                0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
                0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x30, 0x39, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0xd4, 0x31, 0x00, 0x00, 0x00, 0x01,
                0x00, 0x00, 0x00, 0x02, 0x51, 0x02, 0x5c, 0x61,
                0xfb, 0xcf, 0xc0, 0x78, 0xf6, 0x93, 0x34, 0xf8,
                0x34, 0xbe, 0x6d, 0xd2, 0x6d, 0x55, 0xa9, 0x55,
                0xc3, 0x34, 0x41, 0x28, 0xe0, 0x60, 0x12, 0x8e,
                0xde, 0x35, 0x23, 0xa2, 0x4a, 0x46, 0x1c, 0x89,
                0x43, 0xab, 0x08, 0x59,
                // number of inputs:
                0x00, 0x00, 0x00, 0x01,
                // transferable input:
                0xf1, 0xe1, 0xd1, 0xc1, 0xb1, 0xa1, 0x91, 0x81,
                0x71, 0x61, 0x51, 0x41, 0x31, 0x21, 0x11, 0x01,
                0xf0, 0xe0, 0xd0, 0xc0, 0xb0, 0xa0, 0x90, 0x80,
                0x70, 0x60, 0x50, 0x40, 0x30, 0x20, 0x10, 0x00,
                0x00, 0x00, 0x00, 0x05, 0x00, 0x01, 0x02, 0x03,
                0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b,
                0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13,
                0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b,
                0x1c, 0x1d, 0x1e, 0x1f, 0x00, 0x00, 0x00, 0x05,
                0x00, 0x00, 0x00, 0x00, 0x07, 0x5b, 0xcd, 0x15,
                0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03,
                0x00, 0x00, 0x00, 0x07,
                // Memo length:
                0x00, 0x00, 0x00, 0x04,
                // Memo:
                0x00, 0x01, 0x02, 0x03,
            ]
        )
    }

    func testEncodeDecodeCreateAssetTransaction() throws {
        try encodeDecodeTest(
            value: CreateAssetTransaction(
                networkID: NetworkID(4),
                blockchainID: BlockchainID(
                    data: Data(hex: "0xffffffffeeeeeeeeddddddddccccccccbbbbbbbbaaaaaaaa9999999988888888")!
                )!,
                outputs: [exampleTransferableOutput()],
                inputs: [exampleTransferableInput()],
                memo: Data(hex: "0x00010203")!,
                name: "Volatility Index",
                symbol: "VIX",
                denomination: 2,
                initialStates: [exampleInitialState()]
            ),
            bytes: [
                // base tx:
                0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x04,
                0xff, 0xff, 0xff, 0xff, 0xee, 0xee, 0xee, 0xee,
                0xdd, 0xdd, 0xdd, 0xdd,
                0xcc, 0xcc, 0xcc, 0xcc, 0xbb, 0xbb, 0xbb, 0xbb,
                0xaa, 0xaa, 0xaa, 0xaa, 0x99, 0x99, 0x99, 0x99,
                0x88, 0x88, 0x88, 0x88, 0x00, 0x00, 0x00, 0x01,
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
                0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
                0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
                0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x30, 0x39, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0xd4, 0x31, 0x00, 0x00, 0x00, 0x01,
                0x00, 0x00, 0x00, 0x02, 0x51, 0x02, 0x5c, 0x61,
                0xfb, 0xcf, 0xc0, 0x78, 0xf6, 0x93, 0x34, 0xf8,
                0x34, 0xbe, 0x6d, 0xd2, 0x6d, 0x55, 0xa9, 0x55,
                0xc3, 0x34, 0x41, 0x28, 0xe0, 0x60, 0x12, 0x8e,
                0xde, 0x35, 0x23, 0xa2, 0x4a, 0x46, 0x1c, 0x89,
                0x43, 0xab, 0x08, 0x59, 0x00, 0x00, 0x00, 0x01,
                0xf1, 0xe1, 0xd1, 0xc1, 0xb1, 0xa1, 0x91, 0x81,
                0x71, 0x61, 0x51, 0x41, 0x31, 0x21, 0x11, 0x01,
                0xf0, 0xe0, 0xd0, 0xc0, 0xb0, 0xa0, 0x90, 0x80,
                0x70, 0x60, 0x50, 0x40, 0x30, 0x20, 0x10, 0x00,
                0x00, 0x00, 0x00, 0x05, 0x00, 0x01, 0x02, 0x03,
                0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b,
                0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13,
                0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b,
                0x1c, 0x1d, 0x1e, 0x1f, 0x00, 0x00, 0x00, 0x05,
                0x00, 0x00, 0x00, 0x00, 0x07, 0x5b, 0xcd, 0x15,
                0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03,
                0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x04,
                0x00, 0x01, 0x02, 0x03,
                // name:
                0x00, 0x10, 0x56, 0x6f, 0x6c, 0x61, 0x74, 0x69,
                0x6c, 0x69, 0x74, 0x79, 0x20, 0x49, 0x6e, 0x64,
                0x65, 0x78,
                // symbol length:
                0x00, 0x03,
                // symbol:
                0x56, 0x49, 0x58,
                // denomination:
                0x02,
                // number of InitialStates:
                0x00, 0x00, 0x00, 0x01,
                // InitialStates[0]:
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x30, 0x39, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0xd4, 0x31, 0x00, 0x00, 0x00, 0x01,
                0x00, 0x00, 0x00, 0x02, 0x51, 0x02, 0x5c, 0x61,
                0xfb, 0xcf, 0xc0, 0x78, 0xf6, 0x93, 0x34, 0xf8,
                0x34, 0xbe, 0x6d, 0xd2, 0x6d, 0x55, 0xa9, 0x55,
                0xc3, 0x34, 0x41, 0x28, 0xe0, 0x60, 0x12, 0x8e,
                0xde, 0x35, 0x23, 0xa2, 0x4a, 0x46, 0x1c, 0x89,
                0x43, 0xab, 0x08, 0x59,
            ]
        )
    }
    
    func testEncodeDecodeOperationTransaction() throws {
        try encodeDecodeTest(
            value: OperationTransaction(
                networkID: NetworkID(4),
                blockchainID: BlockchainID(
                    data: Data(hex: "0xffffffffeeeeeeeeddddddddccccccccbbbbbbbbaaaaaaaa9999999988888888")!
                )!,
                outputs: [exampleTransferableOutput()],
                inputs: [exampleTransferableInput()],
                memo: Data(hex: "0x00010203")!,
                operations: [exampleTransferableOperation()]
            ),
            bytes: [
                // base tx:
                0x00, 0x00, 0x00, 0x02,
                0x00, 0x00, 0x00, 0x04, 0xff, 0xff, 0xff, 0xff,
                0xee, 0xee, 0xee, 0xee, 0xdd, 0xdd, 0xdd, 0xdd,
                0xcc, 0xcc, 0xcc, 0xcc, 0xbb, 0xbb, 0xbb, 0xbb,
                0xaa, 0xaa, 0xaa, 0xaa, 0x99, 0x99, 0x99, 0x99,
                0x88, 0x88, 0x88, 0x88, 0x00, 0x00, 0x00, 0x01,
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
                0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
                0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
                0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x30, 0x39, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0xd4, 0x31, 0x00, 0x00, 0x00, 0x01,
                0x00, 0x00, 0x00, 0x02, 0x51, 0x02, 0x5c, 0x61,
                0xfb, 0xcf, 0xc0, 0x78, 0xf6, 0x93, 0x34, 0xf8,
                0x34, 0xbe, 0x6d, 0xd2, 0x6d, 0x55, 0xa9, 0x55,
                0xc3, 0x34, 0x41, 0x28, 0xe0, 0x60, 0x12, 0x8e,
                0xde, 0x35, 0x23, 0xa2, 0x4a, 0x46, 0x1c, 0x89,
                0x43, 0xab, 0x08, 0x59, 0x00, 0x00, 0x00, 0x01,
                0xf1, 0xe1, 0xd1, 0xc1, 0xb1, 0xa1, 0x91, 0x81,
                0x71, 0x61, 0x51, 0x41, 0x31, 0x21, 0x11, 0x01,
                0xf0, 0xe0, 0xd0, 0xc0, 0xb0, 0xa0, 0x90, 0x80,
                0x70, 0x60, 0x50, 0x40, 0x30, 0x20, 0x10, 0x00,
                0x00, 0x00, 0x00, 0x05, 0x00, 0x01, 0x02, 0x03,
                0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b,
                0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13,
                0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b,
                0x1c, 0x1d, 0x1e, 0x1f, 0x00, 0x00, 0x00, 0x05,
                0x00, 0x00, 0x00, 0x00, 0x07, 0x5b, 0xcd, 0x15,
                0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03,
                0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x04,
                0x00, 0x01, 0x02, 0x03,
                // number of operations:
                0x00, 0x00, 0x00, 0x01,
                // transfer operation:
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
                0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
                0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
                0x00, 0x00, 0x00, 0x01, 0xf1, 0xe1, 0xd1, 0xc1,
                0xb1, 0xa1, 0x91, 0x81, 0x71, 0x61, 0x51, 0x41,
                0x31, 0x21, 0x11, 0x01, 0xf0, 0xe0, 0xd0, 0xc0,
                0xb0, 0xa0, 0x90, 0x80, 0x70, 0x60, 0x50, 0x40,
                0x30, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x05,
                0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x02,
                0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x03,
                0x00, 0x00, 0x30, 0x39, 0x00, 0x00, 0x00, 0x03,
                0x43, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0xd4, 0x31, 0x00, 0x00, 0x00, 0x01, 0x00,
                0x00, 0x00, 0x02, 0x51, 0x02, 0x5c, 0x61, 0xfb,
                0xcf, 0xc0, 0x78, 0xf6, 0x93, 0x34, 0xf8, 0x34,
                0xbe, 0x6d, 0xd2, 0x6d, 0x55, 0xa9, 0x55, 0xc3,
                0x34, 0x41, 0x28, 0xe0, 0x60, 0x12, 0x8e, 0xde,
                0x35, 0x23, 0xa2, 0x4a, 0x46, 0x1c, 0x89, 0x43,
                0xab, 0x08, 0x59,
            ]
        )
    }
    
    func testEncodeDecodeImportTransaction() throws {
        try encodeDecodeTest(
            value: ImportTransaction(
                networkID: NetworkID(4),
                blockchainID: BlockchainID(
                    data: Data(hex: "0xffffffffeeeeeeeeddddddddccccccccbbbbbbbbaaaaaaaa9999999988888888")!
                )!,
                outputs: [exampleTransferableOutput()],
                inputs: [exampleTransferableInput()],
                memo: Data(hex: "0x00010203")!,
                sourceChain: BlockchainID(data: Data(count: 32))!,
                transferableInputs: [exampleTransferableInput()]
            ),
            bytes: [
                // base tx:
                0x00, 0x00, 0x00, 0x03,
                0x00, 0x00, 0x00, 0x04, 0xff, 0xff, 0xff, 0xff,
                0xee, 0xee, 0xee, 0xee, 0xdd, 0xdd, 0xdd, 0xdd,
                0xcc, 0xcc, 0xcc, 0xcc, 0xbb, 0xbb, 0xbb, 0xbb,
                0xaa, 0xaa, 0xaa, 0xaa, 0x99, 0x99, 0x99, 0x99,
                0x88, 0x88, 0x88, 0x88, 0x00, 0x00, 0x00, 0x01,
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
                0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
                0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
                0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x30, 0x39, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0xd4, 0x31, 0x00, 0x00, 0x00, 0x01,
                0x00, 0x00, 0x00, 0x02, 0x51, 0x02, 0x5c, 0x61,
                0xfb, 0xcf, 0xc0, 0x78, 0xf6, 0x93, 0x34, 0xf8,
                0x34, 0xbe, 0x6d, 0xd2, 0x6d, 0x55, 0xa9, 0x55,
                0xc3, 0x34, 0x41, 0x28, 0xe0, 0x60, 0x12, 0x8e,
                0xde, 0x35, 0x23, 0xa2, 0x4a, 0x46, 0x1c, 0x89,
                0x43, 0xab, 0x08, 0x59, 0x00, 0x00, 0x00, 0x01,
                0xf1, 0xe1, 0xd1, 0xc1, 0xb1, 0xa1, 0x91, 0x81,
                0x71, 0x61, 0x51, 0x41, 0x31, 0x21, 0x11, 0x01,
                0xf0, 0xe0, 0xd0, 0xc0, 0xb0, 0xa0, 0x90, 0x80,
                0x70, 0x60, 0x50, 0x40, 0x30, 0x20, 0x10, 0x00,
                0x00, 0x00, 0x00, 0x05, 0x00, 0x01, 0x02, 0x03,
                0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b,
                0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13,
                0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b,
                0x1c, 0x1d, 0x1e, 0x1f, 0x00, 0x00, 0x00, 0x05,
                0x00, 0x00, 0x00, 0x00, 0x07, 0x5b, 0xcd, 0x15,
                0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03,
                0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x04,
                0x00, 0x01, 0x02, 0x03,
                // source chain:
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                // input count:
                0x00, 0x00, 0x00, 0x01,
                // txID:
                0xf1, 0xe1, 0xd1, 0xc1, 0xb1, 0xa1, 0x91, 0x81,
                0x71, 0x61, 0x51, 0x41, 0x31, 0x21, 0x11, 0x01,
                0xf0, 0xe0, 0xd0, 0xc0, 0xb0, 0xa0, 0x90, 0x80,
                0x70, 0x60, 0x50, 0x40, 0x30, 0x20, 0x10, 0x00,
                // utxoIndex:
                0x00, 0x00, 0x00, 0x05,
                // assetID:
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
                0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
                0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
                // input:
                0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00,
                0x07, 0x5b, 0xcd, 0x15, 0x00, 0x00, 0x00, 0x02,
                0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x07,
            ]
        )
    }
    
    func testEncodeDecodeExportTransaction() throws {
        try encodeDecodeTest(
            value: ExportTransaction(
                networkID: NetworkID(4),
                blockchainID: BlockchainID(
                    data: Data(hex: "0xffffffffeeeeeeeeddddddddccccccccbbbbbbbbaaaaaaaa9999999988888888")!
                )!,
                outputs: [exampleTransferableOutput()],
                inputs: [exampleTransferableInput()],
                memo: Data(hex: "0x00010203")!,
                destinationChain: BlockchainID(data: Data(count: 32))!,
                transferableOutputs: [exampleTransferableOutput()]
            ),
            bytes: [
                // base tx:
                0x00, 0x00, 0x00, 0x04,
                0x00, 0x00, 0x00, 0x04, 0xff, 0xff, 0xff, 0xff,
                0xee, 0xee, 0xee, 0xee, 0xdd, 0xdd, 0xdd, 0xdd,
                0xcc, 0xcc, 0xcc, 0xcc, 0xbb, 0xbb, 0xbb, 0xbb,
                0xaa, 0xaa, 0xaa, 0xaa, 0x99, 0x99, 0x99, 0x99,
                0x88, 0x88, 0x88, 0x88, 0x00, 0x00, 0x00, 0x01,
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
                0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
                0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
                0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x30, 0x39, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0xd4, 0x31, 0x00, 0x00, 0x00, 0x01,
                0x00, 0x00, 0x00, 0x02, 0x51, 0x02, 0x5c, 0x61,
                0xfb, 0xcf, 0xc0, 0x78, 0xf6, 0x93, 0x34, 0xf8,
                0x34, 0xbe, 0x6d, 0xd2, 0x6d, 0x55, 0xa9, 0x55,
                0xc3, 0x34, 0x41, 0x28, 0xe0, 0x60, 0x12, 0x8e,
                0xde, 0x35, 0x23, 0xa2, 0x4a, 0x46, 0x1c, 0x89,
                0x43, 0xab, 0x08, 0x59, 0x00, 0x00, 0x00, 0x01,
                0xf1, 0xe1, 0xd1, 0xc1, 0xb1, 0xa1, 0x91, 0x81,
                0x71, 0x61, 0x51, 0x41, 0x31, 0x21, 0x11, 0x01,
                0xf0, 0xe0, 0xd0, 0xc0, 0xb0, 0xa0, 0x90, 0x80,
                0x70, 0x60, 0x50, 0x40, 0x30, 0x20, 0x10, 0x00,
                0x00, 0x00, 0x00, 0x05, 0x00, 0x01, 0x02, 0x03,
                0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b,
                0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13,
                0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b,
                0x1c, 0x1d, 0x1e, 0x1f, 0x00, 0x00, 0x00, 0x05,
                0x00, 0x00, 0x00, 0x00, 0x07, 0x5b, 0xcd, 0x15,
                0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03,
                0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x04,
                0x00, 0x01, 0x02, 0x03,
                // destination_chain:
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                // outs[] count:
                0x00, 0x00, 0x00, 0x01,
                // assetID:
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
                0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
                0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
                // output:
                0x00, 0x00, 0x00, 0x07,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x39,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd4, 0x31,
                0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02,
                0x51, 0x02, 0x5c, 0x61, 0xfb, 0xcf, 0xc0, 0x78,
                0xf6, 0x93, 0x34, 0xf8, 0x34, 0xbe, 0x6d, 0xd2,
                0x6d, 0x55, 0xa9, 0x55, 0xc3, 0x34, 0x41, 0x28,
                0xe0, 0x60, 0x12, 0x8e, 0xde, 0x35, 0x23, 0xa2,
                0x4a, 0x46, 0x1c, 0x89, 0x43, 0xab, 0x08, 0x59,
            ]
        )
    }
    
    func testEncodeDecodeSignedAvalancheTransaction() throws {
        try encodeDecodeTest(
            value: SignedAvalancheTransaction(
                unsignedTransaction: exampleBaseTransaction(),
                credentials: [exampleSECP256K1Credential()]
            ),
            bytes: [
                // Codec ID
                0x00, 0x00,
                // unsigned transaction:
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
                0xff, 0xff, 0xff, 0xff, 0xee, 0xee, 0xee, 0xee,
                0xdd, 0xdd, 0xdd, 0xdd, 0xcc, 0xcc, 0xcc, 0xcc,
                0xbb, 0xbb, 0xbb, 0xbb, 0xaa, 0xaa, 0xaa, 0xaa,
                0x99, 0x99, 0x99, 0x99, 0x88, 0x88, 0x88, 0x88,
                0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x02, 0x03,
                0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b,
                0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13,
                0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b,
                0x1c, 0x1d, 0x1e, 0x1f, 0x00, 0x00, 0x00, 0x07,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x39,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd4, 0x31,
                0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02,
                0x51, 0x02, 0x5c, 0x61, 0xfb, 0xcf, 0xc0, 0x78,
                0xf6, 0x93, 0x34, 0xf8, 0x34, 0xbe, 0x6d, 0xd2,
                0x6d, 0x55, 0xa9, 0x55, 0xc3, 0x34, 0x41, 0x28,
                0xe0, 0x60, 0x12, 0x8e, 0xde, 0x35, 0x23, 0xa2,
                0x4a, 0x46, 0x1c, 0x89, 0x43, 0xab, 0x08, 0x59,
                0x00, 0x00, 0x00, 0x01, 0xf1, 0xe1, 0xd1, 0xc1,
                0xb1, 0xa1, 0x91, 0x81, 0x71, 0x61, 0x51, 0x41,
                0x31, 0x21, 0x11, 0x01, 0xf0, 0xe0, 0xd0, 0xc0,
                0xb0, 0xa0, 0x90, 0x80, 0x70, 0x60, 0x50, 0x40,
                0x30, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x05,
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
                0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
                0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
                0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00,
                0x07, 0x5b, 0xcd, 0x15, 0x00, 0x00, 0x00, 0x02,
                0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x07,
                0x00, 0x00, 0x00, 0x04, 0x00, 0x01, 0x02, 0x03,
                // number of credentials:
                0x00, 0x00, 0x00, 0x01,
                // credential[0]:
                0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x02,
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
                0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
                0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1e, 0x1d, 0x1f,
                0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,
                0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2e, 0x2d, 0x2f,
                0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
                0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
                0x00, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46,
                0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e,
                0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56,
                0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5e, 0x5d,
                0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66,
                0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6e, 0x6d,
                0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76,
                0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e,
                0x7f, 0x00,
            ]
        )
    }
    
    func testEncodeDecodeUTXO() throws {
        try encodeDecodeTest(
            value: UTXO(
                transactionID: TransactionID(hex: "0xf966750f438867c3c9828ddcdbe660e21ccdbb36a9276958f011ba472f75d4e7")!,
                utxoIndex: 0,
                assetID: AssetID(hex: "0x000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f")!,
                output: exampleSECP256K1TransferOutput()
            ),
            bytes: [
                // Codec ID:
                0x00, 0x00,
                // txID:
                0xf9, 0x66, 0x75, 0x0f, 0x43, 0x88, 0x67, 0xc3,
                0xc9, 0x82, 0x8d, 0xdc, 0xdb, 0xe6, 0x60, 0xe2,
                0x1c, 0xcd, 0xbb, 0x36, 0xa9, 0x27, 0x69, 0x58,
                0xf0, 0x11, 0xba, 0x47, 0x2f, 0x75, 0xd4, 0xe7,
                // utxo index:
                0x00, 0x00, 0x00, 0x00,
                // assetID:
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
                0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
                0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
                // output:
                0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x30, 0x39, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0xd4, 0x31, 0x00, 0x00, 0x00, 0x01,
                0x00, 0x00, 0x00, 0x02, 0x51, 0x02, 0x5c, 0x61,
                0xfb, 0xcf, 0xc0, 0x78, 0xf6, 0x93, 0x34, 0xf8,
                0x34, 0xbe, 0x6d, 0xd2, 0x6d, 0x55, 0xa9, 0x55,
                0xc3, 0x34, 0x41, 0x28, 0xe0, 0x60, 0x12, 0x8e,
                0xde, 0x35, 0x23, 0xa2, 0x4a, 0x46, 0x1c, 0x89,
                0x43, 0xab, 0x08, 0x59,
            ]
        )
    }
    
    func testEncodeDecodeGenesisAsset() throws {
        try encodeDecodeTest(
            value: GenesisAsset(
                alias: "asset1",
                networkID: NetworkID(12345),
                blockchainID: BlockchainID(data: Data(count: 32))!,
                outputs: [],
                inputs: [],
                memo: Data(hex: "0x66726f6d20736e6f77666c616b6520746f206176616c616e636865")!,
                name: "asset1",
                symbol: "MFCA",
                denomination: 1,
                initialStates: [exampleInitialState()]
            ),
            bytes: [
                // asset alias len:
                0x00, 0x06,
                // asset alias:
                0x61, 0x73, 0x73, 0x65, 0x74, 0x31,
                // network_id:
                0x00, 0x00, 0x30, 0x39,
                // blockchain_id:
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                // output_len:
                0x00, 0x00, 0x00, 0x00,
                // input_len:
                0x00, 0x00, 0x00, 0x00,
                // memo_len:
                0x00, 0x00, 0x00, 0x1b,
                // memo:
                0x66, 0x72, 0x6f, 0x6d, 0x20, 0x73, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61,
                0x6b, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x76, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x68, 0x65,
                // asset_name_len:
                0x00, 0x06,
                // asset_name:
                0x61, 0x73, 0x73, 0x65, 0x74, 0x31,
                // symbol_len:
                0x00, 0x04,
                // symbol:
                0x4d, 0x46, 0x43, 0x41,
                // denomination:
                0x01,
                // number of InitialStates:
                0x00, 0x00, 0x00, 0x01,
                // InitialStates[0]:
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x30, 0x39, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0xd4, 0x31, 0x00, 0x00, 0x00, 0x01,
                0x00, 0x00, 0x00, 0x02, 0x51, 0x02, 0x5c, 0x61,
                0xfb, 0xcf, 0xc0, 0x78, 0xf6, 0x93, 0x34, 0xf8,
                0x34, 0xbe, 0x6d, 0xd2, 0x6d, 0x55, 0xa9, 0x55,
                0xc3, 0x34, 0x41, 0x28, 0xe0, 0x60, 0x12, 0x8e,
                0xde, 0x35, 0x23, 0xa2, 0x4a, 0x46, 0x1c, 0x89,
                0x43, 0xab, 0x08, 0x59,
            ]
        )
    }
    
    func testEncodeDecodeSECP256K1OutputOwners() throws {
        try encodeDecodeTest(
            value: exampleSECP256K1OutputOwners(),
            bytes: [
                // type_id:
                0x00, 0x00, 0x00, 0x0b,
                // locktime:
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                // threshold:
                0x00, 0x00, 0x00, 0x01,
                // number of addresses:
                0x00, 0x00, 0x00, 0x01,
                // addrs[0]:
                0xda, 0x2b, 0xee, 0x01, 0xbe, 0x82, 0xec, 0xc0,
                0x0c, 0x34, 0xf3, 0x61, 0xed, 0xa8, 0xeb, 0x30,
                0xfb, 0x5a, 0x71, 0x5c,
            ],
            context: Self.pChainDecoderContext
        )
    }
    
    func testEncodeDecodeAddValidatorTransaction() throws {
        try encodeDecodeTest(
            value: AddValidatorTransaction(
                networkID: NetworkID(12345),
                blockchainID: BlockchainID(data: Data(count: 32))!,
                outputs: [examplePChainTransferableOutput()],
                inputs: [examplePChainTransferableInput()],
                memo: Data(),
                validator: exampleValidator(),
                stake: Stake(lockedOutputs: [
                    TransferableOutput(
                        assetID: AssetID(hex: "0x39c33a499ce4c33a3b09cdd2cfa01ae70dbf2d18b2d7d168524440e55d550088")!,
                        output: SECP256K1TransferOutput(
                            amount: 2000000000000,
                            locktime: Date(timeIntervalSince1970: 0),
                            threshold: 1,
                            addresses: [
                                Address(raw: Data(hex: "0x3cb7d3842e8cee6a0ebd09f1fe884f6861e1b29c")!, hrp: Self.hrp, chainId: "P")
                            ]
                        )
                    )
                ]),
                rewardsOwner: exampleSECP256K1OutputOwners(),
                shares: 0x00000064
            ),
            bytes: [
                // base tx:
                0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x30, 0x39,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x01, 0x68, 0x70, 0xb7, 0xd6,
                0x6a, 0xc3, 0x25, 0x40, 0x31, 0x13, 0x79, 0xe5,
                0xb5, 0xdb, 0xad, 0x28, 0xec, 0x7e, 0xb8, 0xdd,
                0xbf, 0xc8, 0xf4, 0xd6,
                0x72, 0x99, 0xeb, 0xb4, 0x84, 0x75, 0x90, 0x7a,
                0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00,
                0xee, 0x5b, 0xe5, 0xc0, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                0x00, 0x00, 0x00, 0x01, 0xda, 0x2b, 0xee, 0x01,
                0xbe, 0x82, 0xec, 0xc0, 0x0c, 0x34, 0xf3, 0x61,
                0xed, 0xa8, 0xeb, 0x30, 0xfb, 0x5a, 0x71, 0x5c,
                0x00, 0x00, 0x00, 0x01,
                0xdf, 0xaf, 0xbd, 0xf5, 0xc8, 0x1f, 0x63, 0x5c,
                0x92, 0x57, 0x82, 0x4f, 0xf2, 0x1c, 0x8e, 0x3e,
                0x6f, 0x7b, 0x63, 0x2a, 0xc3, 0x06, 0xe1, 0x14,
                0x46, 0xee, 0x54, 0x0d, 0x34, 0x71, 0x1a, 0x15,
                0x00, 0x00, 0x00, 0x01,
                0x68, 0x70, 0xb7, 0xd6, 0x6a, 0xc3, 0x25, 0x40,
                0x31, 0x13, 0x79, 0xe5, 0xb5, 0xdb, 0xad, 0x28,
                0xec, 0x7e, 0xb8, 0xdd, 0xbf, 0xc8, 0xf4, 0xd6,
                0x72, 0x99, 0xeb, 0xb4, 0x84, 0x75, 0x90, 0x7a,
                0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00,
                0xee, 0x6b, 0x28, 0x00, 0x00, 0x00, 0x00, 0x01,
                0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00,
                // Node ID
                0xe9, 0x09, 0x4f, 0x73, 0x69, 0x80, 0x02, 0xfd,
                0x52, 0xc9, 0x08, 0x19, 0xb4, 0x57, 0xb9, 0xfb,
                0xc8, 0x66, 0xab, 0x80,
                // StartTime
                0x00, 0x00, 0x00, 0x00, 0x5f, 0x21, 0xf3, 0x1d,
                // EndTime
                0x00, 0x00, 0x00, 0x00, 0x5f, 0x49, 0x7d, 0xc6,
                // Weight
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd4, 0x31,
                // Stake
                0x00, 0x00, 0x00, 0x01, 0x39, 0xc3, 0x3a, 0x49,
                0x9c, 0xe4, 0xc3, 0x3a, 0x3b, 0x09, 0xcd, 0xd2,
                0xcf, 0xa0, 0x1a, 0xe7, 0x0d, 0xbf, 0x2d, 0x18,
                0xb2, 0xd7, 0xd1, 0x68, 0x52, 0x44, 0x40, 0xe5,
                0x5d, 0x55, 0x00, 0x88, 0x00, 0x00, 0x00, 0x07,
                0x00, 0x00, 0x01, 0xd1, 0xa9, 0x4a, 0x20, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x3c, 0xb7, 0xd3, 0x84, 0x2e, 0x8c, 0xee, 0x6a,
                0x0e, 0xbd, 0x09, 0xf1, 0xfe, 0x88, 0x4f, 0x68,
                0x61, 0xe1, 0xb2, 0x9c,
                // RewardsOwner
                0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                0x00, 0x00, 0x00, 0x01, 0xda, 0x2b, 0xee, 0x01,
                0xbe, 0x82, 0xec, 0xc0, 0x0c, 0x34, 0xf3, 0x61,
                0xed, 0xa8, 0xeb, 0x30, 0xfb, 0x5a, 0x71, 0x5c,
                // Shares
                0x00, 0x00, 0x00, 0x64,
            ],
            context: Self.pChainDecoderContext
        )
    }
    
    func testEncodeDecodeAddSubnetValidatorTransaction() throws {
        try encodeDecodeTest(
            value: AddSubnetValidatorTransaction(
                networkID: NetworkID(12345),
                blockchainID: BlockchainID(data: Data(count: 32))!,
                outputs: [examplePChainTransferableOutput()],
                inputs: [examplePChainTransferableInput()],
                memo: Data(),
                validator: exampleValidator(),
                subnetID: BlockchainID(hex: "0x58b1092871db85bc752742054e2e8be0adf8166ec1f0f0769f4779f14c71d7eb")!,
                subnetAuth: SubnetAuth(signatureIndices: [0])
            ),
            bytes: [
                // base tx:
                0x00, 0x00, 0x00, 0x0d,
                0x00, 0x00, 0x30, 0x39,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x01,
                0x68, 0x70, 0xb7, 0xd6, 0x6a, 0xc3, 0x25, 0x40,
                0x31, 0x13, 0x79, 0xe5, 0xb5, 0xdb, 0xad, 0x28,
                0xec, 0x7e, 0xb8, 0xdd, 0xbf, 0xc8, 0xf4, 0xd6,
                0x72, 0x99, 0xeb, 0xb4, 0x84, 0x75, 0x90, 0x7a,
                0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00,
                0xee, 0x5b, 0xe5, 0xc0, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                0x00, 0x00, 0x00, 0x01, 0xda, 0x2b, 0xee, 0x01,
                0xbe, 0x82, 0xec, 0xc0, 0x0c, 0x34, 0xf3, 0x61,
                0xed, 0xa8, 0xeb, 0x30, 0xfb, 0x5a, 0x71, 0x5c,
                0x00, 0x00, 0x00, 0x01,
                0xdf, 0xaf, 0xbd, 0xf5, 0xc8, 0x1f, 0x63, 0x5c,
                0x92, 0x57, 0x82, 0x4f, 0xf2, 0x1c, 0x8e, 0x3e,
                0x6f, 0x7b, 0x63, 0x2a, 0xc3, 0x06, 0xe1, 0x14,
                0x46, 0xee, 0x54, 0x0d, 0x34, 0x71, 0x1a, 0x15,
                0x00, 0x00, 0x00, 0x01,
                0x68, 0x70, 0xb7, 0xd6, 0x6a, 0xc3, 0x25, 0x40,
                0x31, 0x13, 0x79, 0xe5, 0xb5, 0xdb, 0xad, 0x28,
                0xec, 0x7e, 0xb8, 0xdd, 0xbf, 0xc8, 0xf4, 0xd6,
                0x72, 0x99, 0xeb, 0xb4, 0x84, 0x75, 0x90, 0x7a,
                0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00,
                0xee, 0x6b, 0x28, 0x00, 0x00, 0x00, 0x00, 0x01,
                0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00,
                // Node ID
                0xe9, 0x09, 0x4f, 0x73, 0x69, 0x80, 0x02, 0xfd,
                0x52, 0xc9, 0x08, 0x19, 0xb4, 0x57, 0xb9, 0xfb,
                0xc8, 0x66, 0xab, 0x80,
                // StartTime
                0x00, 0x00, 0x00, 0x00, 0x5f, 0x21, 0xf3, 0x1d,
                // EndTime
                0x00, 0x00, 0x00, 0x00, 0x5f, 0x49, 0x7d, 0xc6,
                // Weight
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd4, 0x31,
                // SubnetID
                0x58, 0xb1, 0x09, 0x28, 0x71, 0xdb, 0x85, 0xbc,
                0x75, 0x27, 0x42, 0x05, 0x4e, 0x2e, 0x8b, 0xe0,
                0xad, 0xf8, 0x16, 0x6e, 0xc1, 0xf0, 0xf0, 0x76,
                0x9f, 0x47, 0x79, 0xf1, 0x4c, 0x71, 0xd7, 0xeb,
                // SubnetAuth
                // SubnetAuth TypeID
                0x00, 0x00, 0x00, 0x0a,
                // SigIndices length
                0x00, 0x00, 0x00, 0x01,
                // SigIndices
                0x00, 0x00, 0x00, 0x00,
            ],
            context: Self.pChainDecoderContext
        )
    }
    
    func testEncodeDecodeAddDelegatorTransaction() throws {
        try encodeDecodeTest(
            value: AddDelegatorTransaction(
                networkID: NetworkID(12345),
                blockchainID: BlockchainID(data: Data(count: 32))!,
                outputs: [examplePChainTransferableOutput()],
                inputs: [examplePChainTransferableInput()],
                memo: Data(),
                validator: exampleValidator(),
                stake: Stake(lockedOutputs: [
                    TransferableOutput(
                        assetID: AssetID(hex: "0x39c33a499ce4c33a3b09cdd2cfa01ae70dbf2d18b2d7d168524440e55d550088")!,
                        output: SECP256K1TransferOutput(
                            amount: 2000000000000,
                            locktime: Date(timeIntervalSince1970: 0),
                            threshold: 1,
                            addresses: [
                                Address(raw: Data(hex: "0x3cb7d3842e8cee6a0ebd09f1fe884f6861e1b29c")!, hrp: Self.hrp, chainId: "P")
                            ]
                        )
                    )
                ]),
                rewardsOwner: exampleSECP256K1OutputOwners()
            ),
            bytes: [
                // base tx:
                0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x30, 0x39,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x01,
                0x68, 0x70, 0xb7, 0xd6, 0x6a, 0xc3, 0x25, 0x40,
                0x31, 0x13, 0x79, 0xe5, 0xb5, 0xdb, 0xad, 0x28,
                0xec, 0x7e, 0xb8, 0xdd, 0xbf, 0xc8, 0xf4, 0xd6,
                0x72, 0x99, 0xeb, 0xb4, 0x84, 0x75, 0x90, 0x7a,
                0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00,
                0xee, 0x5b, 0xe5, 0xc0, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                0x00, 0x00, 0x00, 0x01, 0xda, 0x2b, 0xee, 0x01,
                0xbe, 0x82, 0xec, 0xc0, 0x0c, 0x34, 0xf3, 0x61,
                0xed, 0xa8, 0xeb, 0x30, 0xfb, 0x5a, 0x71, 0x5c,
                0x00, 0x00, 0x00, 0x01,
                0xdf, 0xaf, 0xbd, 0xf5, 0xc8, 0x1f, 0x63, 0x5c,
                0x92, 0x57, 0x82, 0x4f, 0xf2, 0x1c, 0x8e, 0x3e,
                0x6f, 0x7b, 0x63, 0x2a, 0xc3, 0x06, 0xe1, 0x14,
                0x46, 0xee, 0x54, 0x0d, 0x34, 0x71, 0x1a, 0x15,
                0x00, 0x00, 0x00, 0x01,
                0x68, 0x70, 0xb7, 0xd6, 0x6a, 0xc3, 0x25, 0x40,
                0x31, 0x13, 0x79, 0xe5, 0xb5, 0xdb, 0xad, 0x28,
                0xec, 0x7e, 0xb8, 0xdd, 0xbf, 0xc8, 0xf4, 0xd6,
                0x72, 0x99, 0xeb, 0xb4, 0x84, 0x75, 0x90, 0x7a,
                0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00,
                0xee, 0x6b, 0x28, 0x00, 0x00, 0x00, 0x00, 0x01,
                0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00,
                // Node ID
                0xe9, 0x09, 0x4f, 0x73, 0x69, 0x80, 0x02, 0xfd,
                0x52, 0xc9, 0x08, 0x19, 0xb4, 0x57, 0xb9, 0xfb,
                0xc8, 0x66, 0xab, 0x80,
                // StartTime
                0x00, 0x00, 0x00, 0x00, 0x5f, 0x21, 0xf3, 0x1d,
                // EndTime
                0x00, 0x00, 0x00, 0x00, 0x5f, 0x49, 0x7d, 0xc6,
                // Weight
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd4, 0x31,
                // Stake
                0x00, 0x00, 0x00, 0x01, 0x39, 0xc3, 0x3a, 0x49,
                0x9c, 0xe4, 0xc3, 0x3a, 0x3b, 0x09, 0xcd, 0xd2,
                0xcf, 0xa0, 0x1a, 0xe7, 0x0d, 0xbf, 0x2d, 0x18,
                0xb2, 0xd7, 0xd1, 0x68, 0x52, 0x44, 0x40, 0xe5,
                0x5d, 0x55, 0x00, 0x88, 0x00, 0x00, 0x00, 0x07,
                0x00, 0x00, 0x01, 0xd1, 0xa9, 0x4a, 0x20, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x3c, 0xb7, 0xd3, 0x84, 0x2e, 0x8c, 0xee, 0x6a,
                0x0e, 0xbd, 0x09, 0xf1, 0xfe, 0x88, 0x4f, 0x68,
                0x61, 0xe1, 0xb2, 0x9c,
                // RewardsOwner
                0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                0x00, 0x00, 0x00, 0x01, 0xda, 0x2b, 0xee, 0x01,
                0xbe, 0x82, 0xec, 0xc0, 0x0c, 0x34, 0xf3, 0x61,
                0xed, 0xa8, 0xeb, 0x30, 0xfb, 0x5a, 0x71, 0x5c,
            ],
            context: Self.pChainDecoderContext
        )
    }
    
    func testEncodeDecodeCreateSubnetTransaction() throws {
        try encodeDecodeTest(
            value: CreateSubnetTransaction(
                networkID: NetworkID(12345),
                blockchainID: BlockchainID(data: Data(count: 32))!,
                outputs: [examplePChainTransferableOutput()],
                inputs: [examplePChainTransferableInput()],
                memo: Data(),
                rewardsOwner: exampleSECP256K1OutputOwners()
            ),
            bytes: [
                // base tx:
                0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x30, 0x39,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x01,
                0x68, 0x70, 0xb7, 0xd6, 0x6a, 0xc3, 0x25, 0x40,
                0x31, 0x13, 0x79, 0xe5, 0xb5, 0xdb, 0xad, 0x28,
                0xec, 0x7e, 0xb8, 0xdd, 0xbf, 0xc8, 0xf4, 0xd6,
                0x72, 0x99, 0xeb, 0xb4, 0x84, 0x75, 0x90, 0x7a,
                0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00,
                0xee, 0x5b, 0xe5, 0xc0, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                0x00, 0x00, 0x00, 0x01, 0xda, 0x2b, 0xee, 0x01,
                0xbe, 0x82, 0xec, 0xc0, 0x0c, 0x34, 0xf3, 0x61,
                0xed, 0xa8, 0xeb, 0x30, 0xfb, 0x5a, 0x71, 0x5c,
                0x00, 0x00, 0x00, 0x01,
                0xdf, 0xaf, 0xbd, 0xf5, 0xc8, 0x1f, 0x63, 0x5c,
                0x92, 0x57, 0x82, 0x4f, 0xf2, 0x1c, 0x8e, 0x3e,
                0x6f, 0x7b, 0x63, 0x2a, 0xc3, 0x06, 0xe1, 0x14,
                0x46, 0xee, 0x54, 0x0d, 0x34, 0x71, 0x1a, 0x15,
                0x00, 0x00, 0x00, 0x01,
                0x68, 0x70, 0xb7, 0xd6, 0x6a, 0xc3, 0x25, 0x40,
                0x31, 0x13, 0x79, 0xe5, 0xb5, 0xdb, 0xad, 0x28,
                0xec, 0x7e, 0xb8, 0xdd, 0xbf, 0xc8, 0xf4, 0xd6,
                0x72, 0x99, 0xeb, 0xb4, 0x84, 0x75, 0x90, 0x7a,
                0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00,
                0xee, 0x6b, 0x28, 0x00, 0x00, 0x00, 0x00, 0x01,
                0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00,
                // RewardsOwner type id
                0x00, 0x00, 0x00, 0x0b,
                // locktime:
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                // threshold:
                0x00, 0x00, 0x00, 0x01,
                // number of addresses:
                0x00, 0x00, 0x00, 0x01,
                // addrs[0]:
                0xda, 0x2b, 0xee, 0x01,
                0xbe, 0x82, 0xec, 0xc0, 0x0c, 0x34, 0xf3, 0x61,
                0xed, 0xa8, 0xeb, 0x30, 0xfb, 0x5a, 0x71, 0x5c
            ],
            context: Self.pChainDecoderContext
        )
    }
    
    func testEncodeDecodePChainImportTransaction() throws {
        try encodeDecodeTest(
            value: PChainImportTransaction(
                networkID: NetworkID(12345),
                blockchainID: BlockchainID(data: Data(count: 32))!,
                outputs: [examplePChainTransferableOutput()],
                inputs: [examplePChainTransferableInput()],
                memo: Data(),
                sourceChain: BlockchainID(hex: "0x787cd3243c002e9bf5bbbaea8a42a16c1a19cc105047c66996807cbf16acee10")!,
                transferableInputs: [examplePChainTransferableInput()]
            ),
            bytes: [
                // base tx:
                0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x30, 0x39,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x01,
                0x68, 0x70, 0xb7, 0xd6, 0x6a, 0xc3, 0x25, 0x40,
                0x31, 0x13, 0x79, 0xe5, 0xb5, 0xdb, 0xad, 0x28,
                0xec, 0x7e, 0xb8, 0xdd, 0xbf, 0xc8, 0xf4, 0xd6,
                0x72, 0x99, 0xeb, 0xb4, 0x84, 0x75, 0x90, 0x7a,
                0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00,
                0xee, 0x5b, 0xe5, 0xc0, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                0x00, 0x00, 0x00, 0x01, 0xda, 0x2b, 0xee, 0x01,
                0xbe, 0x82, 0xec, 0xc0, 0x0c, 0x34, 0xf3, 0x61,
                0xed, 0xa8, 0xeb, 0x30, 0xfb, 0x5a, 0x71, 0x5c,
                0x00, 0x00, 0x00, 0x01,
                0xdf, 0xaf, 0xbd, 0xf5, 0xc8, 0x1f, 0x63, 0x5c,
                0x92, 0x57, 0x82, 0x4f, 0xf2, 0x1c, 0x8e, 0x3e,
                0x6f, 0x7b, 0x63, 0x2a, 0xc3, 0x06, 0xe1, 0x14,
                0x46, 0xee, 0x54, 0x0d, 0x34, 0x71, 0x1a, 0x15,
                0x00, 0x00, 0x00, 0x01,
                0x68, 0x70, 0xb7, 0xd6, 0x6a, 0xc3, 0x25, 0x40,
                0x31, 0x13, 0x79, 0xe5, 0xb5, 0xdb, 0xad, 0x28,
                0xec, 0x7e, 0xb8, 0xdd, 0xbf, 0xc8, 0xf4, 0xd6,
                0x72, 0x99, 0xeb, 0xb4, 0x84, 0x75, 0x90, 0x7a,
                0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00,
                0xee, 0x6b, 0x28, 0x00, 0x00, 0x00, 0x00, 0x01,
                0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00,
                // sourceChain
                0x78, 0x7c, 0xd3, 0x24, 0x3c, 0x00, 0x2e, 0x9b,
                0xf5, 0xbb, 0xba, 0xea, 0x8a, 0x42, 0xa1, 0x6c,
                0x1a, 0x19, 0xcc, 0x10, 0x50, 0x47, 0xc6, 0x69,
                0x96, 0x80, 0x7c, 0xbf, 0x16, 0xac, 0xee, 0x10,
                // input count:
                0x00, 0x00, 0x00, 0x01,
                // txID:
                0xdf, 0xaf, 0xbd, 0xf5, 0xc8, 0x1f, 0x63, 0x5c,
                0x92, 0x57, 0x82, 0x4f, 0xf2, 0x1c, 0x8e, 0x3e,
                0x6f, 0x7b, 0x63, 0x2a, 0xc3, 0x06, 0xe1, 0x14,
                0x46, 0xee, 0x54, 0x0d, 0x34, 0x71, 0x1a, 0x15,
                // utxoIndex:
                0x00, 0x00, 0x00, 0x01,
                // assetID:
                0x68, 0x70, 0xb7, 0xd6, 0x6a, 0xc3, 0x25, 0x40,
                0x31, 0x13, 0x79, 0xe5, 0xb5, 0xdb, 0xad, 0x28,
                0xec, 0x7e, 0xb8, 0xdd, 0xbf, 0xc8, 0xf4, 0xd6,
                0x72, 0x99, 0xeb, 0xb4, 0x84, 0x75, 0x90, 0x7a,
                // input:
                0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00,
                0xee, 0x6b, 0x28, 0x00, 0x00, 0x00, 0x00, 0x01,
                0x00, 0x00, 0x00, 0x00,
            ],
            context: Self.pChainDecoderContext
        )
    }
    
    func testEncodeDecodePChainExportTransaction() throws {
        try encodeDecodeTest(
            value: PChainExportTransaction(
                networkID: NetworkID(12345),
                blockchainID: BlockchainID(data: Data(count: 32))!,
                outputs: [examplePChainTransferableOutput()],
                inputs: [examplePChainTransferableInput()],
                memo: Data(),
                destinationChain: BlockchainID(data: Data(count: 32))!,
                transferableOutputs: [examplePChainTransferableOutput()]
            ),
            bytes: [
                // base tx:
                0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x30, 0x39,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x01,
                0x68, 0x70, 0xb7, 0xd6, 0x6a, 0xc3, 0x25, 0x40,
                0x31, 0x13, 0x79, 0xe5, 0xb5, 0xdb, 0xad, 0x28,
                0xec, 0x7e, 0xb8, 0xdd, 0xbf, 0xc8, 0xf4, 0xd6,
                0x72, 0x99, 0xeb, 0xb4, 0x84, 0x75, 0x90, 0x7a,
                0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00,
                0xee, 0x5b, 0xe5, 0xc0, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                0x00, 0x00, 0x00, 0x01, 0xda, 0x2b, 0xee, 0x01,
                0xbe, 0x82, 0xec, 0xc0, 0x0c, 0x34, 0xf3, 0x61,
                0xed, 0xa8, 0xeb, 0x30, 0xfb, 0x5a, 0x71, 0x5c,
                0x00, 0x00, 0x00, 0x01,
                0xdf, 0xaf, 0xbd, 0xf5, 0xc8, 0x1f, 0x63, 0x5c,
                0x92, 0x57, 0x82, 0x4f, 0xf2, 0x1c, 0x8e, 0x3e,
                0x6f, 0x7b, 0x63, 0x2a, 0xc3, 0x06, 0xe1, 0x14,
                0x46, 0xee, 0x54, 0x0d, 0x34, 0x71, 0x1a, 0x15,
                0x00, 0x00, 0x00, 0x01,
                0x68, 0x70, 0xb7, 0xd6, 0x6a, 0xc3, 0x25, 0x40,
                0x31, 0x13, 0x79, 0xe5, 0xb5, 0xdb, 0xad, 0x28,
                0xec, 0x7e, 0xb8, 0xdd, 0xbf, 0xc8, 0xf4, 0xd6,
                0x72, 0x99, 0xeb, 0xb4, 0x84, 0x75, 0x90, 0x7a,
                0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00,
                0xee, 0x6b, 0x28, 0x00, 0x00, 0x00, 0x00, 0x01,
                0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00,
                // destination_chain:
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                // outs[] count:
                0x00, 0x00, 0x00, 0x01,
                // assetID:
                0x68, 0x70, 0xb7, 0xd6, 0x6a, 0xc3, 0x25, 0x40,
                0x31, 0x13, 0x79, 0xe5, 0xb5, 0xdb, 0xad, 0x28,
                0xec, 0x7e, 0xb8, 0xdd, 0xbf, 0xc8, 0xf4, 0xd6,
                0x72, 0x99, 0xeb, 0xb4, 0x84, 0x75, 0x90, 0x7a,
                // output:
                0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00,
                0xee, 0x5b, 0xe5, 0xc0, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                0x00, 0x00, 0x00, 0x01, 0xda, 0x2b, 0xee, 0x01,
                0xbe, 0x82, 0xec, 0xc0, 0x0c, 0x34, 0xf3, 0x61,
                0xed, 0xa8, 0xeb, 0x30, 0xfb, 0x5a, 0x71, 0x5c,
            ],
            context: Self.pChainDecoderContext
        )
    }
    
    func testEncodeDecodeStakeableLockedInput() throws {
        try encodeDecodeTest(
            value: StakeableLockedInput(
                locktime: Date(timeIntervalSince1970: 54321),
                transferableInput: examplePChainTransferableInput()
            ),
            bytes: [
                // type_id:
                0x00, 0x00, 0x00, 0x15,
                // locktime:
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd4, 0x31,
                // transferable_in
                // txID:
                0xdf, 0xaf, 0xbd, 0xf5, 0xc8, 0x1f, 0x63, 0x5c,
                0x92, 0x57, 0x82, 0x4f, 0xf2, 0x1c, 0x8e, 0x3e,
                0x6f, 0x7b, 0x63, 0x2a, 0xc3, 0x06, 0xe1, 0x14,
                0x46, 0xee, 0x54, 0x0d, 0x34, 0x71, 0x1a, 0x15,
                // utxoIndex:
                0x00, 0x00, 0x00, 0x01,
                // assetID:
                0x68, 0x70, 0xb7, 0xd6, 0x6a, 0xc3, 0x25, 0x40,
                0x31, 0x13, 0x79, 0xe5, 0xb5, 0xdb, 0xad, 0x28,
                0xec, 0x7e, 0xb8, 0xdd, 0xbf, 0xc8, 0xf4, 0xd6,
                0x72, 0x99, 0xeb, 0xb4, 0x84, 0x75, 0x90, 0x7a,
                // input:
                0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00,
                0xee, 0x6b, 0x28, 0x00, 0x00, 0x00, 0x00, 0x01,
                0x00, 0x00, 0x00, 0x00,
            ]
        )
    }
    
    func testEncodeDecodeStakeableLockedOutput() throws {
        try encodeDecodeTest(
            value: StakeableLockedOutput(
                locktime: Date(timeIntervalSince1970: 54321),
                transferableOutput: examplePChainTransferableOutput()
            ),
            bytes: [
                // type_id:
                0x00, 0x00, 0x00, 0x16,
                // locktime:
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd4, 0x31,
                // transferable_out
                // assetID:
                0x68, 0x70, 0xb7, 0xd6, 0x6a, 0xc3, 0x25, 0x40,
                0x31, 0x13, 0x79, 0xe5, 0xb5, 0xdb, 0xad, 0x28,
                0xec, 0x7e, 0xb8, 0xdd, 0xbf, 0xc8, 0xf4, 0xd6,
                0x72, 0x99, 0xeb, 0xb4, 0x84, 0x75, 0x90, 0x7a,
                // output:
                0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00,
                0xee, 0x5b, 0xe5, 0xc0, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                0x00, 0x00, 0x00, 0x01, 0xda, 0x2b, 0xee, 0x01,
                0xbe, 0x82, 0xec, 0xc0, 0x0c, 0x34, 0xf3, 0x61,
                0xed, 0xa8, 0xeb, 0x30, 0xfb, 0x5a, 0x71, 0x5c,
            ],
            context: Self.pChainDecoderContext
        )
    }
    
    func testEncodeDecodeEVMInput() throws {
        try encodeDecodeTest(
            value: exampleEVMInput(),
            bytes: [
                // address:
                0x8d, 0xb9, 0x7c, 0x7c, 0xec, 0xe2, 0x49, 0xc2,
                0xb9, 0x8b, 0xdc, 0x02, 0x26, 0xcc, 0x4c, 0x2a,
                0x57, 0xbf, 0x52, 0xfc,
                // amount:
                0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x84, 0x80,
                // assetID:
                0xdb, 0xcf, 0x89, 0x0f, 0x77, 0xf4, 0x9b, 0x96,
                0x85, 0x76, 0x48, 0xb7, 0x2b, 0x77, 0xf9, 0xf8,
                0x29, 0x37, 0xf2, 0x8a, 0x68, 0x70, 0x4a, 0xf0,
                0x5d, 0xa0, 0xdc, 0x12, 0xba, 0x53, 0xf2, 0xdb,
                // nonce:
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            ]
        )
    }
    
    func testEncodeDecodeEVMOutput() throws {
        try encodeDecodeTest(
            value: exampleEVMOutput(),
            bytes: [
                // address:
                0x0e, 0xb5, 0xcc, 0xb8, 0x5c, 0x29, 0x00, 0x9b,
                0x60, 0x60, 0xde, 0xcb, 0x35, 0x3a, 0x38, 0xea,
                0x3b, 0x52, 0xcd, 0x20,
                // amount:
                0x00, 0x00, 0x00, 0x74, 0x6a, 0x52, 0x88, 0x00,
                // assetID:
                0xdb, 0xcf, 0x89, 0x0f, 0x77, 0xf4, 0x9b, 0x96,
                0x85, 0x76, 0x48, 0xb7, 0x2b, 0x77, 0xf9, 0xf8,
                0x29, 0x37, 0xf2, 0x8a, 0x68, 0x70, 0x4a, 0xf0,
                0x5d, 0xa0, 0xdc, 0x12, 0xba, 0x53, 0xf2, 0xdb,
            ]
        )
    }
    
    func testEncodeDecodeCChainExportTransaction() throws {
        try encodeDecodeTest(
            value: CChainExportTransaction(
                networkID: NetworkID(12345),
                blockchainID: BlockchainID(hex: "0x91060eabfb5a571720109b5896e5ff00010a1cfe6b103d585e6ebf27b97a1735")!,
                destinationChain: BlockchainID(hex: "0xd891ad56056d9c01f18f43f58b5c784ad07a4a49cf3d1f11623804b5cba2c6bf")!,
                inputs: [exampleEVMInput()],
                exportedOutputs: [
                    TransferableOutput(
                        assetID: AssetID(hex: "0xdbcf890f77f49b96857648b72b77f9f82937f28a68704af05da0dc12ba53f2db")!,
                        output: SECP256K1TransferOutput(
                            amount: 1000000,
                            locktime: Date(timeIntervalSince1970: 0),
                            threshold: 1,
                            addresses: [
                                Address(raw: Data(hex: "0x66f90db6137a78f76b3693f7f2bc507956dae563")!, hrp: Self.hrp, chainId: "C")
                            ]
                        )
                    )
                ]
            ),
            bytes: [
                // typeID:
                0x00, 0x00, 0x00, 0x01,
                // networkID:
                0x00, 0x00, 0x30, 0x39,
                // blockchainID:
                0x91, 0x06, 0x0e, 0xab, 0xfb, 0x5a, 0x57, 0x17,
                0x20, 0x10, 0x9b, 0x58, 0x96, 0xe5, 0xff, 0x00,
                0x01, 0x0a, 0x1c, 0xfe, 0x6b, 0x10, 0x3d, 0x58,
                0x5e, 0x6e, 0xbf, 0x27, 0xb9, 0x7a, 0x17, 0x35,
                // destination_chain:
                0xd8, 0x91, 0xad, 0x56, 0x05, 0x6d, 0x9c, 0x01,
                0xf1, 0x8f, 0x43, 0xf5, 0x8b, 0x5c, 0x78, 0x4a,
                0xd0, 0x7a, 0x4a, 0x49, 0xcf, 0x3d, 0x1f, 0x11,
                0x62, 0x38, 0x04, 0xb5, 0xcb, 0xa2, 0xc6, 0xbf,
                // inputs[] count:
                0x00, 0x00, 0x00, 0x01,
                // inputs[0]
                0x8d, 0xb9, 0x7c, 0x7c, 0xec, 0xe2, 0x49, 0xc2,
                0xb9, 0x8b, 0xdc, 0x02, 0x26, 0xcc, 0x4c, 0x2a,
                0x57, 0xbf, 0x52, 0xfc, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x1e, 0x84, 0x80, 0xdb, 0xcf, 0x89, 0x0f,
                0x77, 0xf4, 0x9b, 0x96, 0x85, 0x76, 0x48, 0xb7,
                0x2b, 0x77, 0xf9, 0xf8, 0x29, 0x37, 0xf2, 0x8a,
                0x68, 0x70, 0x4a, 0xf0, 0x5d, 0xa0, 0xdc, 0x12,
                0xba, 0x53, 0xf2, 0xdb, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00,
                // exportedOutputs[] count
                0x00, 0x00, 0x00, 0x01,
                // exportedOutputs[0]
                0xdb, 0xcf, 0x89, 0x0f, 0x77, 0xf4, 0x9b, 0x96,
                0x85, 0x76, 0x48, 0xb7, 0x2b, 0x77, 0xf9, 0xf8,
                0x29, 0x37, 0xf2, 0x8a, 0x68, 0x70, 0x4a, 0xf0,
                0x5d, 0xa0, 0xdc, 0x12, 0xba, 0x53, 0xf2, 0xdb,
                0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x0f, 0x42, 0x40, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                0x00, 0x00, 0x00, 0x01, 0x66, 0xf9, 0x0d, 0xb6,
                0x13, 0x7a, 0x78, 0xf7, 0x6b, 0x36, 0x93, 0xf7,
                0xf2, 0xbc, 0x50, 0x79, 0x56, 0xda, 0xe5, 0x63,
            ],
            context: Self.cChainDecoderContext
        )
    }
    
    func testEncodeDecodeCChainImportTransaction() throws {
        try encodeDecodeTest(
            value: CChainImportTransaction(
                networkID: NetworkID(12345),
                blockchainID: BlockchainID(hex: "0x91060eabfb5a571720109b5896e5ff00010a1cfe6b103d585e6ebf27b97a1735")!,
                sourceChain: BlockchainID(hex: "0xd891ad56056d9c01f18f43f58b5c784ad07a4a49cf3d1f11623804b5cba2c6bf")!,
                importedInputs: [
                    TransferableInput(
                        transactionID: TransactionID(hex: "0x6613a40dcdd8d22ea4aa99a4c84349056317cf550b6685e045e459954f258e59")!,
                        utxoIndex: 1,
                        assetID: AssetID(hex: "0xdbcf890f77f49b96857648b72b77f9f82937f28a68704af05da0dc12ba53f2db")!,
                        input: SECP256K1TransferInput(
                            amount: 500000000000,
                            addressIndices: [0]
                        )
                    )
                ],
                outputs: [exampleEVMOutput()]
            ),
            bytes: [
                // typeID:
                0x00, 0x00, 0x00, 0x00,
                // networkID:
                0x00, 0x00, 0x30, 0x39,
                // blockchainID:
                0x91, 0x06, 0x0e, 0xab, 0xfb, 0x5a, 0x57, 0x17,
                0x20, 0x10, 0x9b, 0x58, 0x96, 0xe5, 0xff, 0x00,
                0x01, 0x0a, 0x1c, 0xfe, 0x6b, 0x10, 0x3d, 0x58,
                0x5e, 0x6e, 0xbf, 0x27, 0xb9, 0x7a, 0x17, 0x35,
                // sourceChain:
                0xd8, 0x91, 0xad, 0x56, 0x05, 0x6d, 0x9c, 0x01,
                0xf1, 0x8f, 0x43, 0xf5, 0x8b, 0x5c, 0x78, 0x4a,
                0xd0, 0x7a, 0x4a, 0x49, 0xcf, 0x3d, 0x1f, 0x11,
                0x62, 0x38, 0x04, 0xb5, 0xcb, 0xa2, 0xc6, 0xbf,
                // importedInputs[] count:
                0x00, 0x00, 0x00, 0x01,
                // importedInputs[0]
                0x66, 0x13, 0xa4, 0x0d, 0xcd, 0xd8, 0xd2, 0x2e,
                0xa4, 0xaa, 0x99, 0xa4, 0xc8, 0x43, 0x49, 0x05,
                0x63, 0x17, 0xcf, 0x55, 0x0b, 0x66, 0x85, 0xe0,
                0x45, 0xe4, 0x59, 0x95, 0x4f, 0x25, 0x8e, 0x59,
                0x00, 0x00, 0x00, 0x01, 0xdb, 0xcf, 0x89, 0x0f,
                0x77, 0xf4, 0x9b, 0x96, 0x85, 0x76, 0x48, 0xb7,
                0x2b, 0x77, 0xf9, 0xf8, 0x29, 0x37, 0xf2, 0x8a,
                0x68, 0x70, 0x4a, 0xf0, 0x5d, 0xa0, 0xdc, 0x12,
                0xba, 0x53, 0xf2, 0xdb, 0x00, 0x00, 0x00, 0x05,
                0x00, 0x00, 0x00, 0x74, 0x6a, 0x52, 0x88, 0x00,
                0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
                // outs[] count
                0x00, 0x00, 0x00, 0x01,
                // outs[0]
                0x0e, 0xb5, 0xcc, 0xb8, 0x5c, 0x29, 0x00, 0x9b,
                0x60, 0x60, 0xde, 0xcb, 0x35, 0x3a, 0x38, 0xea,
                0x3b, 0x52, 0xcd, 0x20, 0x00, 0x00, 0x00, 0x74,
                0x6a, 0x52, 0x88, 0x00, 0xdb, 0xcf, 0x89, 0x0f,
                0x77, 0xf4, 0x9b, 0x96, 0x85, 0x76, 0x48, 0xb7,
                0x2b, 0x77, 0xf9, 0xf8, 0x29, 0x37, 0xf2, 0x8a,
                0x68, 0x70, 0x4a, 0xf0, 0x5d, 0xa0, 0xdc, 0x12,
                0xba, 0x53, 0xf2, 0xdb,
            ]
        )
    }
}
